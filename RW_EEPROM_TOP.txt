`timescale 1ns  1ps

module RW_EEPROM_TOP(
    input clk,
    input rst_n,
    
    output iic_clk,
    inout iic_sda,
    
    output led
);

reg [70] w_data;

wire [70] r_data;

reg sel_rh_wl;

reg iic_exec;

wire iic_done;

reg led_en;

IIC IIC_inst0(
    .clk(clk),
    .rst_n(rst_n),
   
    .slave_addr(7'b1010_000),                 从机器件地址
    .sel_rh_wl(sel_rh_wl),                        选择读写位
    .slave_inaddr(8'b0000_0000),                           从机内部地址
    .iic_exec(iic_exec),                         IIC起始标志位
    
    .sel_speed(1'd0),                        设置输出IIC时钟速度400KHZ  1'd1  100KHZ  1'd0
    
    .iic_clk(iic_clk),                     IIC时钟线
    .iic_sda(iic_sda),                          IIC数据线
    
    .iic_done(iic_done),                    IIC结束标志位
    
    .w_data(w_data),                           写入的数据
    .r_data(r_data)                       读出的数据
);

CHECK_LED_DERIVER CHECK_LED_DERIVER_inst0(
    .clk(clk),
    .rst_n(rst_n),
    
    .led_en(led_en),
    
    .r_data(r_data),
    .w_data(w_data),
    
    .led(led)
);

parameter STATE_CNT = 25_000_000;

状态机
reg [20] state;

reg [310] state_cnt;

parameter IDLE = 1;
parameter START = 2;
parameter OVER = 3;
parameter WAIT = 4;
parameter RESTART = 5;
parameter REOVER = 6;

always @ (posedge clk or negedge rst_n)begin
    if(!rst_n)begin
        state = IDLE;
        
        iic_exec = 1'd0;
        sel_rh_wl = 1'd0;
        
        w_data = 8'b1010_0101;
        
        state_cnt = 14'd0;
        
        led_en = 1'd0;
    end else begin
        case(state)
            IDLE  begin
                iic_exec = 1'd0;
                sel_rh_wl = 1'd0;
                
                w_data = 8'b1010_0101;
                
                state = START;
            end
            START  begin
                iic_exec = 1'd1;
                
                state = OVER;
            end
            OVER  begin
                if(iic_done)begin
                    iic_exec = 1'd0;
                    
                    state = WAIT;
                end
            end
            WAIT  begin
                if(state_cnt  STATE_CNT)begin
                    state_cnt = state_cnt + 1'd1;
                end else begin
                    state_cnt = 1'd0;
                    sel_rh_wl = 1'd1;
                    state = RESTART;
                end
            end
            RESTART  begin
                iic_exec = 1'd1;
                
                state = REOVER;
            end
            REOVER  begin
                if(iic_done)begin
                    iic_exec = 1'd0;
                    
                    led_en = 1'd1;
                end
            end
        endcase
    end
end

endmodule