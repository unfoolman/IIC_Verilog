`timescale 1ns / 1ps

module iic_driver #(
    parameter  DEF_SYS_CLK = 50_000_000,
                DEF_IIC_CLK = 100_000,
                SLAVE_ADDR = 1010_000
)(
    input sys_clk,
    input sys_rst_n,
    
    input w_en,
    input r_en,
    
    input [7:0] word_addr,
    input [7:0] w_data,
    output reg [7:0] r_data,
    
    output reg iic_clk,
    inout iic_sda,
    
    output reg iic_ack
    //调试
    ,
    output reg [3:0] dcstate
);

localparam DEF_CLK_CNT = DEF_SYS_CLK / DEF_IIC_CLK;
reg [7:0] w_slave_addr_reg;
reg [7:0] r_slave_addr_reg;

always @(*)begin
    if(w_en)begin
        w_slave_addr_reg = {SLAVE_ADDR[6:0] , 1'd0};
    end else if(r_en)begin
        r_slave_addr_reg = {SLAVE_ADDR[6:0] , 1'd1};
    end
end

//生成iic时钟
reg [8:0] clk_cnt;
always @(posedge sys_clk or negedge sys_rst_n)begin
    if(!sys_rst_n)begin
        clk_cnt <= 9'd0;
    end else if(w_en || r_en)begin
        if(clk_cnt < DEF_CLK_CNT)begin
            clk_cnt <= clk_cnt + 1'd1;
        end else begin
            clk_cnt <= 9'd0;
        end
    end else begin
        clk_cnt <= 9'd0;
    end
end

always @(posedge sys_clk or negedge sys_rst_n)begin
    if(!sys_rst_n)begin
        iic_clk <= 1'd1;
    end else if((clk_cnt == DEF_CLK_CNT / 2)||(clk_cnt == DEF_CLK_CNT))begin
        iic_clk <= ~iic_clk;
    end else if(~w_en && ~r_en)begin
        iic_clk <= 1'd1;
    end
end

wire iic_clk_hs;
wire iic_clk_hc;
wire iic_clk_ls;
wire iic_clk_lc;

assign iic_clk_hs = (clk_cnt == 9'd1);      //1
assign iic_clk_hc = (clk_cnt == (DEF_CLK_CNT / 4 + 9'd1));      //126
assign iic_clk_ls = (clk_cnt == (DEF_CLK_CNT / 2 + 9'd1));      //251
assign iic_clk_lc = (clk_cnt == (DEF_CLK_CNT / 4 * 3 + 9'd1));  //376

reg sda_out;
reg sda_link;
assign iic_sda = sda_link ? sda_out : 1'dz;

reg [3:0] dnstate;

reg [2:0] bit_cnt;

localparam  IDLE = 4'd0;
localparam  DSTATE = 4'd1;
localparam  DSLAVE_ADDR = 4'd2;
localparam  DACK1 = 4'd3;
localparam  DWORD_ADDR = 4'd4;
localparam  DACK2 = 4'd5;
localparam  DWDATA = 4'd6;
localparam  DACK3 = 4'd7;
localparam  DRSTATE = 4'd8;
localparam  DRSLAVE_ADDR = 4'd9;
localparam  DACK4 = 4'd10;
localparam  DRDATA = 4'd11;
localparam  DACK5 = 4'd12;
localparam  DSTOP = 4'd13;
            
always @(posedge sys_clk or negedge sys_rst_n)begin
    if(!sys_rst_n)begin
        dcstate <= IDLE;
    end else begin
        dcstate <= dnstate;
    end
end

always @(dcstate or dnstate or iic_clk_hs or iic_clk_hc or iic_clk_ls or iic_clk_lc or w_en or r_en)begin
    case(dcstate)
        IDLE : begin
            if(iic_clk_hs)begin
                dnstate <= DSTATE;
            end else begin
                dnstate <= IDLE;
            end
        end
        DSTATE : begin
            if(iic_clk_ls)begin
                dnstate <= DSLAVE_ADDR;
            end else begin
                dnstate <= DSTATE;
            end
        end
        DSLAVE_ADDR : begin
            if(iic_clk_lc && (bit_cnt == 3'd0))begin
                dnstate <= DACK1;
            end else begin
                dnstate <= DSLAVE_ADDR;
            end
        end
        DACK1 : begin
            if(iic_clk_ls && (bit_cnt == 3'd7))begin
                dnstate <= DWORD_ADDR;
            end else begin
                dnstate <= DACK1;
            end
        end
        DWORD_ADDR : begin
            if(iic_clk_lc && (bit_cnt == 3'd0))begin
                dnstate <= DACK2;
            end else begin
                dnstate <= DWORD_ADDR;
            end
        end
        DACK2 : begin
            if(iic_clk_ls && (bit_cnt == 3'd7))begin
                if(w_en)begin
                    dnstate <= DWDATA;
                end else if(r_en)begin
                    dnstate <= DRSTATE;
                end
            end else begin
                dnstate <= DACK2;
            end
        end
        DWDATA : begin
            if(iic_clk_lc && (bit_cnt == 3'd0))begin
                dnstate <= DACK3;
            end else begin
                dnstate <= DWDATA;
            end
        end
        DACK3 : begin
            if(iic_clk_ls && (bit_cnt == 3'd7))begin
                dnstate <= DSTOP;
            end else begin
                dnstate <= DACK3;
            end
        end
        DRSTATE : begin
            if(iic_clk_hc)begin
                dnstate <= DRSLAVE_ADDR;
            end else begin
                dnstate <= DRSTATE;
            end
        end
        DRSLAVE_ADDR : begin
            if(iic_clk_lc && (bit_cnt == 3'd0))begin
                dnstate <= DACK4;
            end else begin
                dnstate <= DRSLAVE_ADDR;
            end
        end
        DACK4 : begin
            if(iic_clk_ls && (bit_cnt == 3'd7))begin
                dnstate <= DRDATA;
            end else begin
                dnstate <= DACK4;
            end
        end
        DRDATA : begin
            if(iic_clk_ls && (bit_cnt == 3'd0))begin
                dnstate <= DACK5;
            end else begin
                dnstate <= DRDATA;
            end
        end
        DACK5 : begin
            if(iic_clk_ls && (bit_cnt == 3'd6))begin
                dnstate <= DSTOP;
            end else begin
                dnstate <= DACK5;
            end
        end
        DSTOP : begin
            if(iic_clk_hc)begin
                dnstate <= IDLE;
            end else begin
                dnstate <= DSTOP;
            end
        end
        default : begin
            dnstate <= IDLE;
        end
    endcase
end

always @(posedge sys_clk or negedge sys_rst_n)begin
    if(!sys_rst_n)begin
        bit_cnt <= 3'd0;
    end else begin
        case(dcstate)
            DSTATE , DRSTATE : begin
                if(iic_clk_hc)begin
                    bit_cnt <= 3'd7;
                end
            end
            DSLAVE_ADDR , DWORD_ADDR , DWDATA , DRSLAVE_ADDR: begin
                if(iic_clk_hc && (bit_cnt > 3'd0))begin
                    bit_cnt <= bit_cnt - 1'd1;
                end
            end
            DACK1 , DACK2 , DACK3 , DACK4 : begin
                if(iic_clk_hc && (~sda_link))begin
                    bit_cnt <= 3'd7;
                end
            end
            DRDATA : begin
                if(iic_clk_ls)begin
                    bit_cnt <= bit_cnt - 1'd1;
                end
            end
            DACK5 : begin
                if(iic_clk_hc)begin
                    bit_cnt <= bit_cnt - 1'd1;
                end
            end
        endcase
    end
end

always @(posedge sys_clk or negedge sys_rst_n)begin
    if(!sys_rst_n)begin
        sda_link <= 1'd1;
        sda_out <= 1'd1;
        
        r_data <= 8'd0;
    end else begin
        case(dcstate)
            IDLE : begin
                sda_out <= 1'd1;
                sda_link <= 1'd1;
            end
            DSTATE : begin
                if(iic_clk_hc)begin
                    sda_out <= 1'd0;
                end
            end
            DSLAVE_ADDR : begin
/**/            if(iic_clk_lc)begin
                    sda_link <= 1'd1;
                    sda_out <= w_slave_addr_reg[bit_cnt];
                end
            end
            DACK1 : begin
                if(iic_clk_ls)begin
                    sda_link <= 1'd0;
                    sda_out <= 1'd1;
                end
            end
            DWORD_ADDR : begin
                if(iic_clk_lc)begin
                    sda_link <= 1'd1;
                    sda_out <= word_addr[bit_cnt];
                end
            end
            DACK2 : begin
                if(iic_clk_ls)begin
                    sda_link <= 1'd0;
                    sda_out <= 1'd1;
                end
            end
            DWDATA : begin
                if(iic_clk_lc)begin
                    sda_link <= 1'd1;
                    sda_out <= w_data[bit_cnt];
                end
            end
            DACK3 : begin
                if(iic_clk_ls)begin
                    sda_link <= 1'd0;
                    sda_out <= 1'd1;
                end
            end
            DRSTATE : begin
                if(iic_clk_lc)begin
                    sda_link <= 1'd1;
                    sda_out <= 1'd1;
                end else if(iic_clk_hs)begin
                    sda_out <= 1'd0;
                end
            end
            DRSLAVE_ADDR : begin
                if(iic_clk_lc)begin
                    sda_link <= 1'd1;
                    sda_out <= r_slave_addr_reg[bit_cnt];
                end
            end
            DACK4 : begin
                if(iic_clk_ls)begin
                    sda_link <= 1'd0;
                    sda_out <= 1'd1;
                end
            end
            DRDATA : begin
                if(iic_clk_hc)begin
                    r_data[bit_cnt] = iic_sda;
                end
            end
            DACK5 : begin
                if(iic_clk_lc)begin
                    sda_link <= 1'd1;
                    sda_out <= 1'd1;
                end
            end
            DSTOP : begin
                if(iic_clk_lc)begin
                    sda_link <= 1'd1;
                    sda_out <= 1'd0;
                end else if(iic_clk_hs)begin
                    sda_link <= 1'd1;
                    sda_out <= 1'd1;
                end
            end
        endcase
    end
end

always @(posedge sys_clk or negedge sys_rst_n)begin
    if(!sys_rst_n)begin
        iic_ack <= 1'd0;
    end else if((dcstate == DSTOP) && (iic_clk_hc))begin
        iic_ack <= 1'd1;
    end else if(dcstate == IDLE)begin
        iic_ack <= 1'd0;
    end
end

endmodule
